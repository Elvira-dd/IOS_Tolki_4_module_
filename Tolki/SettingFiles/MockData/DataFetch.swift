//
//  DataFetch.swift
//  Tolki
//
//  Created by –≠–ª—å–≤–∏—Ä–∞ on 24.12.2024.
//

import SwiftUI
import Foundation






class PodcastService {
    static let shared = PodcastService()
    
    // URL –¥–ª—è —Ñ–µ—Ç—á–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–∞—Å—Ç–∞—Ö
    private let podcastsURL = URL(string: "http://localhost:3000/api/v1/podcasts")!
    
    func fetchPodcasts(completion: @escaping ([Podcast]?) -> Void) {
        let task = URLSession.shared.dataTask(with: podcastsURL) { data, response, error in
            if let data = data {
                do {
                    let podcasts = try JSONDecoder().decode([Podcast].self, from: data)
                    completion(podcasts)
                } catch {
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
                    if let decodingError = error as? DecodingError {
                        switch decodingError {
                        case .keyNotFound(let key, let context):
                            print("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á: \(key) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .typeMismatch(let type, let context):
                            print("–û—à–∏–±–∫–∞ —Ç–∏–ø–∞: \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .valueNotFound(let value, let context):
                            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \(value) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .dataCorrupted(let context):
                            print("–ö–æ—Ä—Ä—É–ø—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: \(context)")
                        @unknown default:
                            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                        }
                    }
                    completion(nil)
                }
            } else {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: \(String(describing: error))")
                completion(nil)
            }
        }
        task.resume()
    }
}
class IssueAllService {
    static let shared = IssueAllService()
    
    // URL –¥–ª—è —Ñ–µ—Ç—á–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–∞—Å—Ç–∞—Ö
    private let issuesURL = URL(string: "http://localhost:3000/api/v1/issues")!
    
    func fetchIssues(completion: @escaping ([Issue]?) -> Void) {
        let task = URLSession.shared.dataTask(with: issuesURL) { data, response, error in
            if let data = data {
                do {
                    let issues = try JSONDecoder().decode([Issue].self, from: data)
                    completion(issues)
                } catch {
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
                    if let decodingError = error as? DecodingError {
                        switch decodingError {
                        case .keyNotFound(let key, let context):
                            print("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á: \(key) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .typeMismatch(let type, let context):
                            print("–û—à–∏–±–∫–∞ —Ç–∏–ø–∞: \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .valueNotFound(let value, let context):
                            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: \(value) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                        case .dataCorrupted(let context):
                            print("–ö–æ—Ä—Ä—É–ø—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: \(context)")
                        @unknown default:
                            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                        }
                    }
                    completion(nil)
                }
            } else {
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: \(String(describing: error))")
                completion(nil)
            }
        }
        task.resume()
    }
}

class IssueService {
    static let shared = IssueService()
    private let baseURL = "http://localhost:3000/api/v1"

    func fetchIssue(id: Int, completion: @escaping (Issue?) -> Void) {
        guard let url = URL(string: "\(baseURL)/issues/\(id)") else {
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø—É—Å–∫–∞")
            completion(nil)
            return
        }

        let request = URLRequest(url: url)

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                completion(nil)
                return
            }

            guard let httpResponse = response as? HTTPURLResponse, (200...299).contains(httpResponse.statusCode) else {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø—É—Å–∫–∞")
                completion(nil)
                return
            }

            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                completion(nil)
                return
            }

            do {
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase
                let issue = try decoder.decode(Issue.self, from: data)
                DispatchQueue.main.async {
                    completion(issue)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø—É—Å–∫–∞: \(error)")
                completion(nil)
            }
        }.resume()
    }
    
}
// AllCommentService —É–¥–∞–ª—ë–Ω, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ CommentService

class CommentService {
    static let shared = CommentService()
    
    private let baseURL = "http://localhost:3000/api/v1" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL
    
    func fetchAllComments(completion: @escaping ([Comment]) -> Void) {
        guard let url = URL(string: "\(baseURL)/comments") else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            completion([])
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error)")
                DispatchQueue.main.async {
                    completion([])
                }
                return
            }
            
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                DispatchQueue.main.async {
                    completion([])
                }
                return
            }
            
            do {
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase
                let comments = try decoder.decode([Comment].self, from: data)
                DispatchQueue.main.async {
                    completion(comments)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: \(error)")
                DispatchQueue.main.async {
                    completion([])
                }
            }
        }.resume()
    }
    
    func createComment(issueId: Int, content: String, authToken: String, completion: @escaping (Bool) -> Void) {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        guard let url = URL(string: "\(baseURL)/comments") else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            completion(false)
            return
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        guard !authToken.isEmpty else {
            print("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            completion(false)
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")
        
        // 3. –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        let requestBody: [String: Any] = [
            "comment": [
                "content": content,
                "commentable_id": issueId,
                "commentable_type": "Issue"
            ]
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody, options: [])
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: \(error.localizedDescription)")
            completion(false)
            return
        }
        
        // 4. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                completion(false)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                completion(false)
                return
            }
            
            print("üîÑ –°—Ç–∞—Ç—É—Å –∫–æ–¥: \(httpResponse.statusCode)")
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                completion(false)
                return
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if let responseString = String(data: data, encoding: .utf8) {
                print("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
            }
            
            // –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
            switch httpResponse.statusCode {
            case 200...299:
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        if let error = json["error"] as? String {
                            print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(error)")
                            completion(false)
                        } else {
                            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                            completion(true)
                        }
                    }
                } catch {
                    print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç)")
                    completion(true)
                }
            case 401:
                print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")
                completion(false)
            case 422:
                print("‚ùå –û—à–∏–±–∫–∞ 422: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                completion(false)
            default:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: \(httpResponse.statusCode)")
                completion(false)
            }
        }
        
        
        task.resume()
    }
    
   
}

class ThemeFetcher: ObservableObject {
    @Published var themes: [ThemeTag] = []

    func fetchThemes() {
        guard let url = URL(string: "http://localhost:3000/api/v1/themes") else { return }
        
        URLSession.shared.dataTask(with: url) { data, _, error in
            if let data = data {
                do {
                    let decoder = JSONDecoder()
                    decoder.keyDecodingStrategy = .convertFromSnakeCase
                    let fetchedThemes = try decoder.decode([ThemeTag].self, from: data)
                    
                    DispatchQueue.main.async {
                        self.themes = fetchedThemes
                    }
                } catch {
                    print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º: \(error)")
                }
            } else if let error = error {
                print("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (—Ç–µ–º—ã): \(error)")
            }
        }.resume()
    }
}

class ProfileService {
    static let shared = ProfileService()
    private let baseURL = "http://localhost:3000/api/v1"
    
    func fetchCurrentProfile(authToken: String, completion: @escaping (Result<UserProfile, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/me") else {
            completion(.failure(URLError(.badURL)))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏
            if let error = error {
                DispatchQueue.main.async {
                    completion(.failure(error))
                }
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
            guard let httpResponse = response as? HTTPURLResponse else {
                DispatchQueue.main.async {
                    completion(.failure(URLError(.badServerResponse)))
                }
                return
            }
            
            print("–°—Ç–∞—Ç—É—Å –∫–æ–¥: \(httpResponse.statusCode)")
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            guard let data = data else {
                DispatchQueue.main.async {
                    completion(.failure(URLError(.cannotParseResponse)))
                }
                return
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if let responseString = String(data: data, encoding: .utf8) {
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(responseString)")
            }
            
            // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            do {
                let decoder = JSONDecoder()
                let profile = try decoder.decode(UserProfile.self, from: data)
                DispatchQueue.main.async {
                    completion(.success(profile))
                }
            } catch {
                DispatchQueue.main.async {
                    print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
                    completion(.failure(error))
                }
            }
        }
        
        task.resume()
    }
}




class ProfileViewModel: ObservableObject {
    @Published var currentProfile: UserProfile? = UserProfile.testProfile
    @Published var isLoading = false
    @Published var error: String?
    @Published var allComments: [Comment] = []

    private let keychain = KeychainService()

    func loadCurrentProfile() {
        isLoading = true
        error = nil

        let token = keychain.getString(forKey: ViewModel.Const.tokenKey) ?? ""

        guard !token.isEmpty else {
            isLoading = false
            return
        }

        ProfileService.shared.fetchCurrentProfile(authToken: token) { [weak self] result in
            DispatchQueue.main.async {
                self?.isLoading = false

                switch result {
                case .success(let profile):
                    self?.currentProfile = profile
                    self?.loadComments() // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ñ–∏–ª—è
                case .failure(let error):
                    self?.error = error.localizedDescription
                }
            }
        }
    }
    
    func loadComments() {
        CommentService.shared.fetchAllComments { [weak self] comments in
            DispatchQueue.main.async {
                self?.allComments = comments
            }
        }
    }
}

struct ErrorView: View {
    let error: String
    
    var body: some View {
        VStack {
            Image(systemName: "exclamationmark.triangle")
                .font(.largeTitle)
                .foregroundColor(.red)
            Text(error)
                .multilineTextAlignment(.center)
                .foregroundColor(.red)
        }
        .padding()
    }
}

struct AdminBadge: View {
    var body: some View {
        HStack {
            Image(systemName: "checkmark.seal.fill")
                .foregroundColor(.green)
            Text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                .font(.caption)
                .bold()
        }
        .padding(6)
        .background(Color.green.opacity(0.2))
        .cornerRadius(8)
    }
}
